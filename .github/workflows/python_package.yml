name: python_package

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types:
      - created

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.12
      uses: actions/setup-python@v2
      with:
        python-version: 3.12
    - name: Build plasma source
      run: |
        pip install -r requirements-develop.txt
        python -m build --sdist .
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download build
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - name: Install plasma source
      run: |
        python -m pip install dist/parametric_plasma_source-*.tar.gz
    - name: Run tests
      run: |
        python -m pip install -r requirements-develop.txt
        cd tests
        python -m pytest

  test_openmc:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download build
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - name: Install OpenMC
      run: |
        cd /opt
        sudo apt install g++ cmake libhdf5-dev
        git clone https://github.com/openmc-dev/openmc.git
        cd openmc
        git checkout develop
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=.. ..
        make
        make install
        cd ..
        python -m pip install .
    - name: Install plasma source
      run: |
        python -m pip install dist/parametric_plasma_source-*.tar.gz
    - name: Run tests
      run: |
        python -m pip install -r requirements-develop.txt
        cd tests
        python -m pytest

  publish:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')}}
    runs-on: ubuntu-latest
    needs: [test, test_openmc]

    steps:
    - name: Download build
      uses: actions/download-artifact@v2
      with:
        name: dist
        path: dist
    - name: Publish wheel artifact to TestPyPI
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python3 -m pip install twine
        python3 -m twine upload --repository testpypi dist/* --verbose
    - name: Release wheel artifact to PyPI
      if: startsWith(github.ref, 'refs/tags')
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python3 -m twine upload dist/* --verbose
